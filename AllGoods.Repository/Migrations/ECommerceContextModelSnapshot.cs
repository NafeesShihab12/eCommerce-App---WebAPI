// <auto-generated />
using System;
using AllGoods.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AllGoods.Repository.Migrations
{
    [DbContext(typeof(ECommerceContext))]
    partial class ECommerceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AllGoods.Repository.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderID"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("OrderItemID")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderID");

                    b.HasIndex("OrderItemID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AllGoods.Repository.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderItemID"));

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VariantAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VariantID")
                        .HasColumnType("integer");

                    b.HasKey("OrderItemID");

                    b.HasIndex("VariantID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("AllGoods.Repository.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProductID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SEOName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ProductID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("AllGoods.Repository.Models.Stock", b =>
                {
                    b.Property<int>("StockID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StockID"));

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("VariantID")
                        .HasColumnType("integer");

                    b.Property<int>("WarehouseID")
                        .HasColumnType("integer");

                    b.HasKey("StockID");

                    b.HasIndex("VariantID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("AllGoods.Repository.Models.Variant", b =>
                {
                    b.Property<int>("VariantID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VariantID"));

                    b.Property<int>("AttributeID")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("Created_On")
                        .HasColumnType("date");

                    b.Property<int>("ProductID")
                        .HasColumnType("integer");

                    b.Property<int>("ValueID")
                        .HasColumnType("integer");

                    b.HasKey("VariantID");

                    b.HasIndex("AttributeID");

                    b.HasIndex("ProductID");

                    b.HasIndex("ValueID");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("AllGoods.Repository.Models.VariantAttribute", b =>
                {
                    b.Property<int>("AttributeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AttributeID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("AttributeID");

                    b.ToTable("VariantAttributes");
                });

            modelBuilder.Entity("AllGoods.Repository.Models.VariantAttributeValue", b =>
                {
                    b.Property<int>("ValueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ValueID"));

                    b.Property<int>("AttributeID")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ValueID");

                    b.HasIndex("AttributeID");

                    b.ToTable("VariantAttributeValues");
                });

            modelBuilder.Entity("AllGoods.Repository.Models.Warehouse", b =>
                {
                    b.Property<int>("WarehouseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WarehouseID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("WarehouseID");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("AllGoods.Repository.Models.Order", b =>
                {
                    b.HasOne("AllGoods.Repository.Models.OrderItem", "OrderItem")
                        .WithMany("Orders")
                        .HasForeignKey("OrderItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("AllGoods.Repository.Models.OrderItem", b =>
                {
                    b.HasOne("AllGoods.Repository.Models.Variant", "Variant")
                        .WithMany("OrderItems")
                        .HasForeignKey("VariantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("AllGoods.Repository.Models.Stock", b =>
                {
                    b.HasOne("AllGoods.Repository.Models.Variant", "Variant")
                        .WithMany("Stocks")
                        .HasForeignKey("VariantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllGoods.Repository.Models.Warehouse", "Warehouse")
                        .WithMany("Stocks")
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variant");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("AllGoods.Repository.Models.Variant", b =>
                {
                    b.HasOne("AllGoods.Repository.Models.VariantAttribute", "VariantAttribute")
                        .WithMany("Variants")
                        .HasForeignKey("AttributeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllGoods.Repository.Models.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AllGoods.Repository.Models.VariantAttributeValue", "VariantAttributeValue")
                        .WithMany("Variants")
                        .HasForeignKey("ValueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("VariantAttribute");

                    b.Navigation("VariantAttributeValue");
                });

            modelBuilder.Entity("AllGoods.Repository.Models.VariantAttributeValue", b =>
                {
                    b.HasOne("AllGoods.Repository.Models.VariantAttribute", "VariantAttribute")
                        .WithMany("Values")
                        .HasForeignKey("AttributeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VariantAttribute");
                });

            modelBuilder.Entity("AllGoods.Repository.Models.OrderItem", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("AllGoods.Repository.Models.Product", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("AllGoods.Repository.Models.Variant", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("AllGoods.Repository.Models.VariantAttribute", b =>
                {
                    b.Navigation("Values");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("AllGoods.Repository.Models.VariantAttributeValue", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("AllGoods.Repository.Models.Warehouse", b =>
                {
                    b.Navigation("Stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
